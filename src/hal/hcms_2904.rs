use defmt::info;
use embassy_stm32::gpio::{AnyPin, Level, Output, Speed};
use embassy_time::Timer;

use stm32watch_rs::traits::display::Display;

const DOT_REGISTER_SIZE: usize = 320 / 8;

pub struct Hcms2904 {
    data_pin: Output<'static, AnyPin>,
    clk_pin: Output<'static, AnyPin>,
    ce_pin: Output<'static, AnyPin>,
    rs_pin: Output<'static, AnyPin>,
    rst_pin: Output<'static, AnyPin>,
    dot_register: [u8; DOT_REGISTER_SIZE],
    cursor_position: usize,
}

impl Hcms2904 {
    pub fn new(
        data_pin: AnyPin,
        clk_pin: AnyPin,
        ce_pin: AnyPin,
        rs_pin: AnyPin,
        rst_pin: AnyPin,
    ) -> Self {
        Self {
            data_pin: Output::new(data_pin, Level::Low, Speed::Medium),
            clk_pin: Output::new(clk_pin, Level::Low, Speed::Medium),
            ce_pin: Output::new(ce_pin, Level::Low, Speed::Medium),
            rs_pin: Output::new(rs_pin, Level::Low, Speed::Medium),
            rst_pin: Output::new(rst_pin, Level::Low, Speed::Medium),
            dot_register: [0; DOT_REGISTER_SIZE],
            cursor_position: 0,
        }
    }

    pub async fn init_display(&mut self) {
        info!("Initializing display...");
        self.data_pin.set_low();
        self.clk_pin.set_low();
        self.ce_pin.set_high();
        self.rs_pin.set_low();

        self.rst_pin.set_low();
        Timer::after_millis(10).await;
        self.rst_pin.set_high();

        self.write_dot_register();

        self.write_to_command_register(0b01001111); // Command Word 0, no sleep, default current, max brightness
        self.write_to_command_register(0b10000001); // Command word 1, serial data output (second display enabled)

        info!("Display initialized");
    }

    fn write_to_command_register(&mut self, command: u8) {
        self.rs_pin.set_high();
        self.ce_pin.set_low();
        self.shift_out_byte(command);
        self.ce_pin.set_high();
    }

    fn write_dot_register(&mut self) {
        self.rs_pin.set_low();
        self.ce_pin.set_low();
        for byte in self.dot_register {
            self.shift_out_byte(byte);
        }
        self.ce_pin.set_high();
    }

    fn shift_out_byte(&mut self, data: u8) {
        for i in (0..8).rev() {
            self.data_pin.set_level(Level::from((data >> i) & 0b1 == 1));
            self.clk_pin.set_high();
            self.clk_pin.set_low();
        }
    }
}

impl Display for Hcms2904 {
    const SCREEN_WIDTH_CHARS: usize = 8;
    const SCREEN_HEIGHT_CHARS: usize = 1;

    const CHAR_WIDTH_PIXELS: usize = 5;
    const CHAR_HEIGHT_PIXELS: usize = 7;

    const SCREEN_WIDTH_PIXELS: usize = Self::SCREEN_WIDTH_CHARS * Self::CHAR_WIDTH_PIXELS;
    const SCREEN_HEIGHT_PIXELS: usize = Self::SCREEN_HEIGHT_CHARS * Self::CHAR_HEIGHT_PIXELS;

    type Coordinates = usize;

    fn move_cursor(&mut self, new_position: Self::Coordinates) {
        self.cursor_position = new_position % Self::SCREEN_WIDTH_PIXELS;
    }

    fn home_cursor(&mut self) {
        self.cursor_position = 0;
    }

    fn print_string(&mut self, string: &str) {
        self.home_cursor();
        // self.clear();
        string.as_bytes().iter().for_each(|&c| {
            for col in 0..Self::CHAR_WIDTH_PIXELS {
                self.dot_register[self.cursor_position] = FONT[((c as usize - 0x20) * 5) + col];
                self.cursor_position += 1;
            }
        });
        self.write_dot_register();
    }

    fn print_at(&mut self, string: &str, position: Self::Coordinates) {
        todo!()
    }

    fn print_at_grid(&mut self, string: &str, position: Self::Coordinates, snap_to_grid: bool) {
        todo!()
    }

    async fn scroll_text(&mut self, string: &str, delay_ms: embassy_time::Duration) {
        Timer::after(delay_ms).await;
        for i in 0..(string.len() - Self::SCREEN_WIDTH_CHARS) {
            self.print_string(string.get(i..(i + Self::SCREEN_WIDTH_CHARS)).unwrap());
            Timer::after(delay_ms).await;
        }

        for i in (0..(string.len() - Self::SCREEN_WIDTH_CHARS)).rev() {
            self.print_string(string.get(i..(i + Self::SCREEN_WIDTH_CHARS)).unwrap());
            Timer::after(delay_ms).await;
        }
    }

    fn clear(&mut self) {
        self.dot_register = [0u8; DOT_REGISTER_SIZE];
        self.write_dot_register();
    }
}

#[repr(u8)]
enum Brightness {
    Brightness0_0 = 0b0000,
    Brightness1_7 = 0b0001,
    Brightness3_3 = 0b0010,
    Brightness5_0 = 0b0011,
    Brightness6_7 = 0b0100,
    Brightness8_3 = 0b0101,
    Brightness11_7 = 0b0110,
    Brightness15 = 0b0111,
    Brightness18 = 0b1000,
    Brightness23 = 0b1001,
    Brightness30 = 0b1010,
    Brightness37 = 0b1011,
    Brightness47 = 0b1100,
    Brightness60 = 0b1101,
    Brightness80 = 0b1110,
    Brighntess100 = 0b1111,
}

#[repr(u8)]
enum Current {
    CurrentLow = 0b10,
    CurrentMidLow = 0b01,
    CurrentMidHigh = 0b00,
    CurrentHigh = 0b11,
}

#[repr(u8)]
enum ControlWord {
    CW0,
    CW1,
}

const FONT: [u8; 480] = [
    0x00, 0x00, 0x00, 0x00, 0x00, // (space)
    0x00, 0x00, 0x5F, 0x00, 0x00, // !
    0x00, 0x07, 0x00, 0x07, 0x00, // "
    0x14, 0x7F, 0x14, 0x7F, 0x14, // #
    0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
    0x23, 0x13, 0x08, 0x64, 0x62, // %
    0x36, 0x49, 0x55, 0x22, 0x50, // &
    0x00, 0x05, 0x03, 0x00, 0x00, // '
    0x00, 0x1C, 0x22, 0x41, 0x00, // (
    0x00, 0x41, 0x22, 0x1C, 0x00, // )
    0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
    0x08, 0x08, 0x3E, 0x08, 0x08, // +
    0x00, 0x50, 0x30, 0x00, 0x00, // ,
    0x08, 0x08, 0x08, 0x08, 0x08, // -
    0x00, 0x60, 0x60, 0x00, 0x00, // .
    0x20, 0x10, 0x08, 0x04, 0x02, // /
    0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
    0x00, 0x42, 0x7F, 0x40, 0x00, // 1
    0x42, 0x61, 0x51, 0x49, 0x46, // 2
    0x21, 0x41, 0x45, 0x4B, 0x31, // 3
    0x18, 0x14, 0x12, 0x7F, 0x10, // 4
    0x27, 0x45, 0x45, 0x45, 0x39, // 5
    0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
    0x01, 0x71, 0x09, 0x05, 0x03, // 7
    0x36, 0x49, 0x49, 0x49, 0x36, // 8
    0x06, 0x49, 0x49, 0x29, 0x1E, // 9
    0x00, 0x36, 0x36, 0x00, 0x00, // :
    0x00, 0x56, 0x36, 0x00, 0x00, // ;
    0x00, 0x08, 0x14, 0x22, 0x41, // <
    0x14, 0x14, 0x14, 0x14, 0x14, // =
    0x41, 0x22, 0x14, 0x08, 0x00, // >
    0x02, 0x01, 0x51, 0x09, 0x06, // ?
    0x32, 0x49, 0x79, 0x41, 0x3E, // @
    0x7E, 0x11, 0x11, 0x11, 0x7E, // A
    0x7F, 0x49, 0x49, 0x49, 0x36, // B
    0x3E, 0x41, 0x41, 0x41, 0x22, // C
    0x7F, 0x41, 0x41, 0x22, 0x1C, // D
    0x7F, 0x49, 0x49, 0x49, 0x41, // E
    0x7F, 0x09, 0x09, 0x01, 0x01, // F
    0x3E, 0x41, 0x41, 0x51, 0x32, // G
    0x7F, 0x08, 0x08, 0x08, 0x7F, // H
    0x00, 0x41, 0x7F, 0x41, 0x00, // I
    0x20, 0x40, 0x41, 0x3F, 0x01, // J
    0x7F, 0x08, 0x14, 0x22, 0x41, // K
    0x7F, 0x40, 0x40, 0x40, 0x40, // L
    0x7F, 0x02, 0x04, 0x02, 0x7F, // M
    0x7F, 0x04, 0x08, 0x10, 0x7F, // N
    0x3E, 0x41, 0x41, 0x41, 0x3E, // O
    0x7F, 0x09, 0x09, 0x09, 0x06, // P
    0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
    0x7F, 0x09, 0x19, 0x29, 0x46, // R
    0x46, 0x49, 0x49, 0x49, 0x31, // S
    0x01, 0x01, 0x7F, 0x01, 0x01, // T
    0x3F, 0x40, 0x40, 0x40, 0x3F, // U
    0x1F, 0x20, 0x40, 0x20, 0x1F, // V
    0x7F, 0x20, 0x18, 0x20, 0x7F, // W
    0x63, 0x14, 0x08, 0x14, 0x63, // X
    0x03, 0x04, 0x78, 0x04, 0x03, // Y
    0x61, 0x51, 0x49, 0x45, 0x43, // Z
    0x00, 0x00, 0x7F, 0x41, 0x41, // [
    0x02, 0x04, 0x08, 0x10, 0x20, // "\"
    0x41, 0x41, 0x7F, 0x00, 0x00, // ]
    0x04, 0x02, 0x01, 0x02, 0x04, // ^
    0x40, 0x40, 0x40, 0x40, 0x40, // _
    0x00, 0x01, 0x02, 0x04, 0x00, // `
    0x20, 0x54, 0x54, 0x54, 0x78, // a
    0x7F, 0x48, 0x44, 0x44, 0x38, // b
    0x38, 0x44, 0x44, 0x44, 0x20, // c
    0x38, 0x44, 0x44, 0x48, 0x7F, // d
    0x38, 0x54, 0x54, 0x54, 0x18, // e
    0x08, 0x7E, 0x09, 0x01, 0x02, // f
    0x08, 0x14, 0x54, 0x54, 0x3C, // g
    0x7F, 0x08, 0x04, 0x04, 0x78, // h
    0x00, 0x44, 0x7D, 0x40, 0x00, // i
    0x20, 0x40, 0x44, 0x3D, 0x00, // j
    0x00, 0x7F, 0x10, 0x28, 0x44, // k
    0x00, 0x41, 0x7F, 0x40, 0x00, // l
    0x7C, 0x04, 0x18, 0x04, 0x78, // m
    0x7C, 0x08, 0x04, 0x04, 0x78, // n
    0x38, 0x44, 0x44, 0x44, 0x38, // o
    0x7C, 0x14, 0x14, 0x14, 0x08, // p
    0x08, 0x14, 0x14, 0x18, 0x7C, // q
    0x7C, 0x08, 0x04, 0x04, 0x08, // r
    0x48, 0x54, 0x54, 0x54, 0x20, // s
    0x04, 0x3F, 0x44, 0x40, 0x20, // t
    0x3C, 0x40, 0x40, 0x20, 0x7C, // u
    0x1C, 0x20, 0x40, 0x20, 0x1C, // v
    0x3C, 0x40, 0x30, 0x40, 0x3C, // w
    0x44, 0x28, 0x10, 0x28, 0x44, // x
    0x0C, 0x50, 0x50, 0x50, 0x3C, // y
    0x44, 0x64, 0x54, 0x4C, 0x44, // z
    0x00, 0x08, 0x36, 0x41, 0x00, // {
    0x00, 0x00, 0x7F, 0x00, 0x00, // |
    0x00, 0x41, 0x36, 0x08, 0x00, // }
    0x08, 0x08, 0x2A, 0x1C, 0x08, // ->
    0x08, 0x1C, 0x2A, 0x08, 0x08, // <-
];
